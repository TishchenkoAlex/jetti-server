"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.publisher = exports.subscriber = exports.IO = exports.HTTP = void 0;
const bodyParser = require("body-parser");
const compression = require("compression");
const cors = require("cors");
const express = require("express");
const fs = require("fs");
const httpServer = require("http");
const path = require("path");
const os = require("os");
require("reflect-metadata");
const socket_io_1 = require("socket.io");
const socket_io_redis_1 = require("socket.io-redis");
const redis_1 = require("redis");
const environment_1 = require("./env/environment");
const dynamic_common_1 = require("./models/Dynamic/dynamic.common");
const global_1 = require("./models/global");
const SQLGenerator_MSSQL_Metadata_1 = require("./fuctions/SQLGenerator.MSSQL.Metadata");
const tasks_1 = require("./models/Tasks/tasks");
const auth_1 = require("./routes/auth");
const utils_1 = require("./routes/utils");
const documents_1 = require("./routes/documents");
const check_auth_1 = require("./routes/middleware/check-auth");
const registers_1 = require("./routes/registers");
const suggest_1 = require("./routes/suggest");
const swagger_1 = require("./routes/swagger");
const tasks_2 = require("./routes/tasks");
const user_settings_1 = require("./routes/user.settings");
const form_1 = require("./routes/form");
const bp_1 = require("./routes/bp");
const exchange_1 = require("./routes/exchange");
const db_sessions_1 = require("./routes/middleware/db-sessions");
const swaggerDocument = require("./swagger.json");
const swaggerUi = require("swagger-ui-express");
// tslint:disable: no-shadowed-variable
const app = express();
exports.HTTP = httpServer.createServer(app);
const root = './';
app.use(compression());
app.use(cors());
app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ limit: '50mb', extended: false }));
app.use(express.static(path.join(root, 'dist')));
const api = `/api`;
app.use(api, check_auth_1.authHTTP, db_sessions_1.jettiDB, utils_1.router);
app.use(api, check_auth_1.authHTTP, db_sessions_1.jettiDB, documents_1.router);
app.use(api, check_auth_1.authHTTP, db_sessions_1.jettiDB, user_settings_1.router);
app.use(api, check_auth_1.authHTTP, db_sessions_1.jettiDB, suggest_1.router);
app.use(api, check_auth_1.authHTTP, db_sessions_1.jettiDB, registers_1.router);
app.use(api, check_auth_1.authHTTP, db_sessions_1.tasksDB, tasks_2.router);
app.use(api, check_auth_1.authHTTP, db_sessions_1.tasksDB, form_1.router);
app.use(api, check_auth_1.authHTTP, db_sessions_1.jettiDB, bp_1.router);
app.use(api, check_auth_1.authHTTP, db_sessions_1.jettiDB, swagger_1.router);
app.use('/auth', db_sessions_1.jettiDB, auth_1.router);
app.use('/exchange', db_sessions_1.jettiDB, exchange_1.router);
app.use('/swagger', swaggerUi.serve, swaggerUi.setup(swaggerDocument));
app.get('*', (req, res) => {
    res.status(200);
    res.send('Jetti API 1.0.0');
});
function errorHandler(err, req, res, next) {
    const errAny = err;
    const errText = `${err.message}${errAny.response ? ' Response data: ' + JSON.stringify(errAny.response.data) : ''}`;
    console.error(errText);
    const status = err && errAny.status ? errAny.status : 500;
    res.status(status).send(errText);
}
app.use(errorHandler);
exports.IO = new socket_io_1.Server(exports.HTTP, { cors: { origin: '*.*', methods: ['GET', 'POST'] } });
exports.IO.use(check_auth_1.authIO);
const pubClient = new redis_1.RedisClient({ host: environment_1.REDIS_DB_HOST, password: environment_1.REDIS_DB_AUTH });
const subClient = pubClient.duplicate();
exports.IO.adapter(socket_io_redis_1.createAdapter({ pubClient, subClient }));
exports.IO.of('/').adapter.on('error', (error) => { });
exports.subscriber = new redis_1.RedisClient(({ host: environment_1.REDIS_DB_HOST, auth_pass: environment_1.REDIS_DB_AUTH }));
exports.publisher = new redis_1.RedisClient(({ host: environment_1.REDIS_DB_HOST, auth_pass: environment_1.REDIS_DB_AUTH }));
exports.subscriber.on('message', function (channel, message) {
    if (channel === 'updateDynamicMeta')
        dynamic_common_1.updateDynamicMeta();
});
exports.subscriber.subscribe('updateDynamicMeta');
const port = (process.env.PORT) || '3000';
exports.HTTP.listen(port, () => console.log(`API running on port: ${port}\nDB: ${environment_1.DB_NAME}\nCPUs: ${os.cpus().length}`));
tasks_1.JQueue.getJobCounts().then(jobs => console.log('JOBS:', jobs));
global_1.Global.init().then(e => {
    if (!global_1.Global.isProd) {
        let script = '';
        const ef = () => { };
        SQLGenerator_MSSQL_Metadata_1.SQLGenegatorMetadata.CreateViewOperations().then(script => fs.writeFile('OperationsView.sql', script, ef));
        SQLGenerator_MSSQL_Metadata_1.SQLGenegatorMetadata.CreateViewOperationsIndex().then(script => fs.writeFile('OperationsViewIndex.sql', script, ef));
        script = SQLGenerator_MSSQL_Metadata_1.SQLGenegatorMetadata.CreateViewCatalogsIndex();
        fs.writeFile('CatalogsViewIndex.sql', script, ef);
        script = SQLGenerator_MSSQL_Metadata_1.SQLGenegatorMetadata.CreateViewCatalogsIndex(true, true);
        fs.writeFile('CatalogsViewIndexDynamic.sql', script, ef);
        script = SQLGenerator_MSSQL_Metadata_1.SQLGenegatorMetadata.CreateViewCatalogs();
        fs.writeFile('CatalogsView.sql', script, ef);
        script = SQLGenerator_MSSQL_Metadata_1.SQLGenegatorMetadata.CreateViewCatalogs(true);
        fs.writeFile('CatalogsViewDynamic.sql', script, ef);
        script = SQLGenerator_MSSQL_Metadata_1.SQLGenegatorMetadata.CreateRegisterInfoViewIndex();
        fs.writeFile('RegisterInfoViewIndex.sql', script, ef);
        script = SQLGenerator_MSSQL_Metadata_1.SQLGenegatorMetadata.RegisterAccumulationClusteredTables();
        fs.writeFile('RegisterAccumulationClusteredTables.sql', script, ef);
        script = SQLGenerator_MSSQL_Metadata_1.SQLGenegatorMetadata.RegisterAccumulationView();
        fs.writeFile('RegisterAccumulationView.sql', script, ef);
        script = SQLGenerator_MSSQL_Metadata_1.SQLGenegatorMetadata.CreateTableRegisterAccumulationTO();
        fs.writeFile('CreateTableRegisterAccumulationTotals.sql', script, ef);
        script = SQLGenerator_MSSQL_Metadata_1.SQLGenegatorMetadata.CreateTableRegisterAccumulationTOv2();
        fs.writeFile('CreateTableRegisterAccumulationTotalsv2.sql', script, ef);
        script = SQLGenerator_MSSQL_Metadata_1.SQLGenegatorMetadata.CreateRegisterAccumulationViewIndex();
        fs.writeFile('CreateRegisterAccumulationViewIndex.sql', script, ef);
    }
});
//# sourceMappingURL=index.js.map