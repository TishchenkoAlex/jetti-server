{
  "swagger": "2.0",
  "info": {
    "description": "НЕLLO HUMAN and WELCOME to JETTIs SWAGGER!",
    "version": "1.0.3",
    "title": "JETTIs SWAGGER",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "Bezkorovayniy.D@sushi-master.net"
    },
    "license": {
      "name": "JETTI inc.",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "sm.jetti-app.com",
  "basePath": "/",
  "tags": [
    {
      "name": "document",
      "description": "Everything about documents"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/api/document/{id}": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Find document by ID",
        "description": "Returns a single document",
        "operationId": "getById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of document to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "TOKEN: Bearer {VALUE}",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "400": {
            "description": "Invalid document ID"
          },
          "404": {
            "description": "Document not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "document"
        ],
        "summary": "Delete document by ID",
        "description": "Returns error or nothing",
        "operationId": "deleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of document to delete",
            "required": true,
            "type": "string"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "TOKEN: Bearer {VALUE}",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid document ID"
          },
          "404": {
            "description": "Document not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/document/meta/{type}/{operationId}": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Returns a metadata of document type",
        "description": "Returns a metadata of document type",
        "operationId": "getMetaByType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "type of document to return",
            "required": true,
            "type": "string"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation of document to return",
            "required": true,
            "type": "string",
            "default": ""
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "TOKEN: Bearer {VALUE}",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DocumentMeta"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Document not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/document": {
      "post": {
        "tags": [
          "document"
        ],
        "summary": "Updates a document in the DB with form data",
        "description": "",
        "operationId": "update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "DocumentUpdateRequest",
            "description": "Document object that needs to be updated in DB and options",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentUpdateRequest"
            }
          },
          {
            "in": "header",
            "name": "Content-Type",
            "description": "header:Content-Type = application/json;charset=utf-8",
            "required": false,
            "type": "string"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "TOKEN: Bearer {VALUE}",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/exchange/login": {
      "post": {
        "tags": [
          "common"
        ],
        "summary": "Get token",
        "description": "",
        "operationId": "getToken",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "UserCredentials",
            "description": "User mail and password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserAuthSettings"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/executeOperation": {
      "post": {
        "tags": [
          "common"
        ],
        "summary": "Execute an operation method ",
        "description": "",
        "operationId": "executeOperation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "description": "Execution parameters as key-value array",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExecuteOperationRequest"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "definitions": {
    "UserAuthSettings": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/UserAccount"
        },
        "token": {
          "type": "string",
          "example": "some token"
        }
      }
    },
    "UserAccount": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "setka.service.account@sushi-master.net"
        },
        "description": {
          "type": "string",
          "example": "setka service account"
        },
        "isAdmin": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "DocumentMeta": {
      "type": "object",
      "required": [
        "date",
        "type",
        "id",
        "posted"
      ],
      "properties": {
        "prop": {
          "type": "string",
          "format": "json"
        },
        "props": {
          "type": "string",
          "format": "json"
        }
      }
    },
    "Document": {
      "type": "object",
      "required": [
        "date",
        "type",
        "id",
        "posted"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "54748760-9604-11EA-BB8A-AF1C6CC66467"
        },
        "parent": {
          "type": "string",
          "format": "uuid",
          "example": "54748760-9604-11EA-BB8A-AF1C6CC66467"
        },
        "code": {
          "type": "string",
          "example": "doc code"
        },
        "date": {
          "type": "string",
          "example": "datetime",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "example": "some description"
        },
        "timestamp": {
          "type": "string",
          "example": "datetime",
          "format": "date-time"
        },
        "posted": {
          "type": "boolean"
        },
        "deleted": {
          "type": "boolean"
        },
        "isfolder": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "example": "Document.Operation"
        },
        "company": {
          "type": "string",
          "format": "uuid",
          "example": "54748760-9604-11EA-BB8A-AF1C6CC66467"
        },
        "user": {
          "type": "string",
          "format": "uuid",
          "example": "54748760-9604-11EA-BB8A-AF1C6CC66467"
        },
        "info": {
          "type": "string",
          "example": "Some info"
        },
        "ExchangeCode": {
          "type": "string",
          "example": "Exchange code"
        },
        "ExchangeBase": {
          "type": "string",
          "example": "Exchange base"
        },
        "doc": {
          "type": "string",
          "example": "doc in JSON"
        },
        "docByKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "DocumentUpdateRequest": {
      "type": "object",
      "properties": {
        "document": {
          "$ref": "#/definitions/Document"
        },
        "options": {
          "$ref": "#/definitions/UpdateOptions"
        }
      }
    },
    "ExecuteOperationRequest": {
      "type": "object",
      "properties": {
        "operationId": {
          "type": "string",
          "format": "uuid",
          "example": "54748760-9604-11EA-BB8A-AF1C6CC66467"
        },
        "method": {
          "type": "string",
          "example": "Method name (default: 'RESTMethod')"
        },
        "args": {
          "type": "object",
          "additionalProperties": true,
          "example": "key-value array"
        }
      }
    },
    "UserCredentials": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "setka.service.account@sushi-master.net"
        },
        "password": {
          "type": "string",
          "example": "some password"
        }
      }
    },
    "UpdateOptions": {
      "type": "object",
      "properties": {
        "updateType": {
          "type": "string",
          "enum": [
            "Insert, Update, InsertOrUpdate"
          ],
          "example": "Define insert or update mode (default: InsertOrUpdate)"
        },
        "searchKey": {
          "type": "object",
          "$ref": "#/definitions/SearchKey"
        },
        "commands": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "someDocumentServerModuleMethodName"
          }
        },
        "queueFlow": {
          "type": "integer",
          "example": "If define, document posted by queue post (async mode)"
        }
      }
    },
    "SearchKey": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "id"
          },
          "value": {
            "type": "string",
            "example": "Any castible value"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "in": "header",
      "name": "api_key"
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}